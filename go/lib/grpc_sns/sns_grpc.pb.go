// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sns.proto

package grpc_sns

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SNSService_CreatePost_FullMethodName     = "/sns.SNSService/CreatePost"
	SNSService_GetPostById_FullMethodName    = "/sns.SNSService/GetPostById"
	SNSService_UpdatePost_FullMethodName     = "/sns.SNSService/UpdatePost"
	SNSService_DeletePost_FullMethodName     = "/sns.SNSService/DeletePost"
	SNSService_CreateComment_FullMethodName  = "/sns.SNSService/CreateComment"
	SNSService_GetCommentById_FullMethodName = "/sns.SNSService/GetCommentById"
	SNSService_UpdateComment_FullMethodName  = "/sns.SNSService/UpdateComment"
	SNSService_DeleteComment_FullMethodName  = "/sns.SNSService/DeleteComment"
	SNSService_CreateLike_FullMethodName     = "/sns.SNSService/CreateLike"
	SNSService_GetLikeById_FullMethodName    = "/sns.SNSService/GetLikeById"
	SNSService_UpdateLike_FullMethodName     = "/sns.SNSService/UpdateLike"
	SNSService_DeleteLike_FullMethodName     = "/sns.SNSService/DeleteLike"
)

// SNSServiceClient is the client API for SNSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SNSServiceClient interface {
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	GetPostById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Post, error)
	UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	DeletePost(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	GetCommentById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Comment, error)
	UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	DeleteComment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Like, error)
	GetLikeById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Like, error)
	UpdateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Like, error)
	DeleteLike(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sNSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSNSServiceClient(cc grpc.ClientConnInterface) SNSServiceClient {
	return &sNSServiceClient{cc}
}

func (c *sNSServiceClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, SNSService_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) GetPostById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, SNSService_GetPostById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, SNSService_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) DeletePost(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SNSService_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, SNSService_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) GetCommentById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, SNSService_GetCommentById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, SNSService_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) DeleteComment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SNSService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) CreateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Like, error) {
	out := new(Like)
	err := c.cc.Invoke(ctx, SNSService_CreateLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) GetLikeById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Like, error) {
	out := new(Like)
	err := c.cc.Invoke(ctx, SNSService_GetLikeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) UpdateLike(ctx context.Context, in *Like, opts ...grpc.CallOption) (*Like, error) {
	out := new(Like)
	err := c.cc.Invoke(ctx, SNSService_UpdateLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNSServiceClient) DeleteLike(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SNSService_DeleteLike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SNSServiceServer is the server API for SNSService service.
// All implementations must embed UnimplementedSNSServiceServer
// for forward compatibility
type SNSServiceServer interface {
	CreatePost(context.Context, *Post) (*Post, error)
	GetPostById(context.Context, *ID) (*Post, error)
	UpdatePost(context.Context, *Post) (*Post, error)
	DeletePost(context.Context, *ID) (*emptypb.Empty, error)
	CreateComment(context.Context, *Comment) (*Comment, error)
	GetCommentById(context.Context, *ID) (*Comment, error)
	UpdateComment(context.Context, *Comment) (*Comment, error)
	DeleteComment(context.Context, *ID) (*emptypb.Empty, error)
	CreateLike(context.Context, *Like) (*Like, error)
	GetLikeById(context.Context, *ID) (*Like, error)
	UpdateLike(context.Context, *Like) (*Like, error)
	DeleteLike(context.Context, *ID) (*emptypb.Empty, error)
	mustEmbedUnimplementedSNSServiceServer()
}

// UnimplementedSNSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSNSServiceServer struct {
}

func (UnimplementedSNSServiceServer) CreatePost(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedSNSServiceServer) GetPostById(context.Context, *ID) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostById not implemented")
}
func (UnimplementedSNSServiceServer) UpdatePost(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedSNSServiceServer) DeletePost(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedSNSServiceServer) CreateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedSNSServiceServer) GetCommentById(context.Context, *ID) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentById not implemented")
}
func (UnimplementedSNSServiceServer) UpdateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedSNSServiceServer) DeleteComment(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedSNSServiceServer) CreateLike(context.Context, *Like) (*Like, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedSNSServiceServer) GetLikeById(context.Context, *ID) (*Like, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeById not implemented")
}
func (UnimplementedSNSServiceServer) UpdateLike(context.Context, *Like) (*Like, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLike not implemented")
}
func (UnimplementedSNSServiceServer) DeleteLike(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLike not implemented")
}
func (UnimplementedSNSServiceServer) mustEmbedUnimplementedSNSServiceServer() {}

// UnsafeSNSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SNSServiceServer will
// result in compilation errors.
type UnsafeSNSServiceServer interface {
	mustEmbedUnimplementedSNSServiceServer()
}

func RegisterSNSServiceServer(s grpc.ServiceRegistrar, srv SNSServiceServer) {
	s.RegisterService(&SNSService_ServiceDesc, srv)
}

func _SNSService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_GetPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).GetPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_GetPostById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).GetPostById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).UpdatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).DeletePost(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_GetCommentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).GetCommentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_GetCommentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).GetCommentById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).UpdateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).DeleteComment(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_CreateLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).CreateLike(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_GetLikeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).GetLikeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_GetLikeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).GetLikeById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_UpdateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Like)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).UpdateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_UpdateLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).UpdateLike(ctx, req.(*Like))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNSService_DeleteLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNSServiceServer).DeleteLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNSService_DeleteLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNSServiceServer).DeleteLike(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// SNSService_ServiceDesc is the grpc.ServiceDesc for SNSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SNSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sns.SNSService",
	HandlerType: (*SNSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _SNSService_CreatePost_Handler,
		},
		{
			MethodName: "GetPostById",
			Handler:    _SNSService_GetPostById_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _SNSService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _SNSService_DeletePost_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _SNSService_CreateComment_Handler,
		},
		{
			MethodName: "GetCommentById",
			Handler:    _SNSService_GetCommentById_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _SNSService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _SNSService_DeleteComment_Handler,
		},
		{
			MethodName: "CreateLike",
			Handler:    _SNSService_CreateLike_Handler,
		},
		{
			MethodName: "GetLikeById",
			Handler:    _SNSService_GetLikeById_Handler,
		},
		{
			MethodName: "UpdateLike",
			Handler:    _SNSService_UpdateLike_Handler,
		},
		{
			MethodName: "DeleteLike",
			Handler:    _SNSService_DeleteLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sns.proto",
}
