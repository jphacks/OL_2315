// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: fund.proto

package grpc_fund

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FundService_CreateFund_FullMethodName  = "/fund.FundService/CreateFund"
	FundService_GetFundById_FullMethodName = "/fund.FundService/GetFundById"
	FundService_UpdateFund_FullMethodName  = "/fund.FundService/UpdateFund"
	FundService_DeleteFund_FullMethodName  = "/fund.FundService/DeleteFund"
)

// FundServiceClient is the client API for FundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundServiceClient interface {
	CreateFund(ctx context.Context, in *Fund, opts ...grpc.CallOption) (*Fund, error)
	GetFundById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Fund, error)
	UpdateFund(ctx context.Context, in *Fund, opts ...grpc.CallOption) (*Fund, error)
	DeleteFund(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFundServiceClient(cc grpc.ClientConnInterface) FundServiceClient {
	return &fundServiceClient{cc}
}

func (c *fundServiceClient) CreateFund(ctx context.Context, in *Fund, opts ...grpc.CallOption) (*Fund, error) {
	out := new(Fund)
	err := c.cc.Invoke(ctx, FundService_CreateFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundServiceClient) GetFundById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Fund, error) {
	out := new(Fund)
	err := c.cc.Invoke(ctx, FundService_GetFundById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundServiceClient) UpdateFund(ctx context.Context, in *Fund, opts ...grpc.CallOption) (*Fund, error) {
	out := new(Fund)
	err := c.cc.Invoke(ctx, FundService_UpdateFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundServiceClient) DeleteFund(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FundService_DeleteFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundServiceServer is the server API for FundService service.
// All implementations must embed UnimplementedFundServiceServer
// for forward compatibility
type FundServiceServer interface {
	CreateFund(context.Context, *Fund) (*Fund, error)
	GetFundById(context.Context, *ID) (*Fund, error)
	UpdateFund(context.Context, *Fund) (*Fund, error)
	DeleteFund(context.Context, *ID) (*emptypb.Empty, error)
	mustEmbedUnimplementedFundServiceServer()
}

// UnimplementedFundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFundServiceServer struct {
}

func (UnimplementedFundServiceServer) CreateFund(context.Context, *Fund) (*Fund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFund not implemented")
}
func (UnimplementedFundServiceServer) GetFundById(context.Context, *ID) (*Fund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFundById not implemented")
}
func (UnimplementedFundServiceServer) UpdateFund(context.Context, *Fund) (*Fund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFund not implemented")
}
func (UnimplementedFundServiceServer) DeleteFund(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFund not implemented")
}
func (UnimplementedFundServiceServer) mustEmbedUnimplementedFundServiceServer() {}

// UnsafeFundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundServiceServer will
// result in compilation errors.
type UnsafeFundServiceServer interface {
	mustEmbedUnimplementedFundServiceServer()
}

func RegisterFundServiceServer(s grpc.ServiceRegistrar, srv FundServiceServer) {
	s.RegisterService(&FundService_ServiceDesc, srv)
}

func _FundService_CreateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).CreateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundService_CreateFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).CreateFund(ctx, req.(*Fund))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundService_GetFundById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).GetFundById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundService_GetFundById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).GetFundById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundService_UpdateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).UpdateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundService_UpdateFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).UpdateFund(ctx, req.(*Fund))
	}
	return interceptor(ctx, in, info, handler)
}

func _FundService_DeleteFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServiceServer).DeleteFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundService_DeleteFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServiceServer).DeleteFund(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// FundService_ServiceDesc is the grpc.ServiceDesc for FundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fund.FundService",
	HandlerType: (*FundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFund",
			Handler:    _FundService_CreateFund_Handler,
		},
		{
			MethodName: "GetFundById",
			Handler:    _FundService_GetFundById_Handler,
		},
		{
			MethodName: "UpdateFund",
			Handler:    _FundService_UpdateFund_Handler,
		},
		{
			MethodName: "DeleteFund",
			Handler:    _FundService_DeleteFund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund.proto",
}
