// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: fund.proto

package fund

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FoundService_CreateFund_FullMethodName  = "/fund.FoundService/CreateFund"
	FoundService_GetFundById_FullMethodName = "/fund.FoundService/GetFundById"
	FoundService_UpdateFund_FullMethodName  = "/fund.FoundService/UpdateFund"
	FoundService_DeleteFund_FullMethodName  = "/fund.FoundService/DeleteFund"
)

// FoundServiceClient is the client API for FoundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoundServiceClient interface {
	CreateFund(ctx context.Context, in *Fund, opts ...grpc.CallOption) (*Fund, error)
	GetFundById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Fund, error)
	UpdateFund(ctx context.Context, in *Fund, opts ...grpc.CallOption) (*Fund, error)
	DeleteFund(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type foundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoundServiceClient(cc grpc.ClientConnInterface) FoundServiceClient {
	return &foundServiceClient{cc}
}

func (c *foundServiceClient) CreateFund(ctx context.Context, in *Fund, opts ...grpc.CallOption) (*Fund, error) {
	out := new(Fund)
	err := c.cc.Invoke(ctx, FoundService_CreateFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foundServiceClient) GetFundById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Fund, error) {
	out := new(Fund)
	err := c.cc.Invoke(ctx, FoundService_GetFundById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foundServiceClient) UpdateFund(ctx context.Context, in *Fund, opts ...grpc.CallOption) (*Fund, error) {
	out := new(Fund)
	err := c.cc.Invoke(ctx, FoundService_UpdateFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foundServiceClient) DeleteFund(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FoundService_DeleteFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoundServiceServer is the server API for FoundService service.
// All implementations must embed UnimplementedFoundServiceServer
// for forward compatibility
type FoundServiceServer interface {
	CreateFund(context.Context, *Fund) (*Fund, error)
	GetFundById(context.Context, *ID) (*Fund, error)
	UpdateFund(context.Context, *Fund) (*Fund, error)
	DeleteFund(context.Context, *ID) (*emptypb.Empty, error)
	mustEmbedUnimplementedFoundServiceServer()
}

// UnimplementedFoundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFoundServiceServer struct {
}

func (UnimplementedFoundServiceServer) CreateFund(context.Context, *Fund) (*Fund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFund not implemented")
}
func (UnimplementedFoundServiceServer) GetFundById(context.Context, *ID) (*Fund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFundById not implemented")
}
func (UnimplementedFoundServiceServer) UpdateFund(context.Context, *Fund) (*Fund, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFund not implemented")
}
func (UnimplementedFoundServiceServer) DeleteFund(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFund not implemented")
}
func (UnimplementedFoundServiceServer) mustEmbedUnimplementedFoundServiceServer() {}

// UnsafeFoundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoundServiceServer will
// result in compilation errors.
type UnsafeFoundServiceServer interface {
	mustEmbedUnimplementedFoundServiceServer()
}

func RegisterFoundServiceServer(s grpc.ServiceRegistrar, srv FoundServiceServer) {
	s.RegisterService(&FoundService_ServiceDesc, srv)
}

func _FoundService_CreateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoundServiceServer).CreateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoundService_CreateFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoundServiceServer).CreateFund(ctx, req.(*Fund))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoundService_GetFundById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoundServiceServer).GetFundById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoundService_GetFundById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoundServiceServer).GetFundById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoundService_UpdateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoundServiceServer).UpdateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoundService_UpdateFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoundServiceServer).UpdateFund(ctx, req.(*Fund))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoundService_DeleteFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoundServiceServer).DeleteFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoundService_DeleteFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoundServiceServer).DeleteFund(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// FoundService_ServiceDesc is the grpc.ServiceDesc for FoundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fund.FoundService",
	HandlerType: (*FoundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFund",
			Handler:    _FoundService_CreateFund_Handler,
		},
		{
			MethodName: "GetFundById",
			Handler:    _FoundService_GetFundById_Handler,
		},
		{
			MethodName: "UpdateFund",
			Handler:    _FoundService_UpdateFund_Handler,
		},
		{
			MethodName: "DeleteFund",
			Handler:    _FoundService_DeleteFund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fund.proto",
}
