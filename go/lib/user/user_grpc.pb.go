// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SocialMediaService_CreateUser_FullMethodName    = "/user.SocialMediaService/CreateUser"
	SocialMediaService_GetUserById_FullMethodName   = "/user.SocialMediaService/GetUserById"
	SocialMediaService_UpdateUser_FullMethodName    = "/user.SocialMediaService/UpdateUser"
	SocialMediaService_DeleteUser_FullMethodName    = "/user.SocialMediaService/DeleteUser"
	SocialMediaService_CreateFollow_FullMethodName  = "/user.SocialMediaService/CreateFollow"
	SocialMediaService_GetFollowById_FullMethodName = "/user.SocialMediaService/GetFollowById"
	SocialMediaService_UpdateFollow_FullMethodName  = "/user.SocialMediaService/UpdateFollow"
	SocialMediaService_DeleteFollow_FullMethodName  = "/user.SocialMediaService/DeleteFollow"
)

// SocialMediaServiceClient is the client API for SocialMediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialMediaServiceClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetUserById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error)
	GetFollowById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Follow, error)
	UpdateFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error)
	DeleteFollow(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type socialMediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialMediaServiceClient(cc grpc.ClientConnInterface) SocialMediaServiceClient {
	return &socialMediaServiceClient{cc}
}

func (c *socialMediaServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, SocialMediaService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaServiceClient) GetUserById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, SocialMediaService_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, SocialMediaService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaServiceClient) DeleteUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SocialMediaService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaServiceClient) CreateFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error) {
	out := new(Follow)
	err := c.cc.Invoke(ctx, SocialMediaService_CreateFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaServiceClient) GetFollowById(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Follow, error) {
	out := new(Follow)
	err := c.cc.Invoke(ctx, SocialMediaService_GetFollowById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaServiceClient) UpdateFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error) {
	out := new(Follow)
	err := c.cc.Invoke(ctx, SocialMediaService_UpdateFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialMediaServiceClient) DeleteFollow(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SocialMediaService_DeleteFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialMediaServiceServer is the server API for SocialMediaService service.
// All implementations must embed UnimplementedSocialMediaServiceServer
// for forward compatibility
type SocialMediaServiceServer interface {
	CreateUser(context.Context, *User) (*User, error)
	GetUserById(context.Context, *ID) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *ID) (*emptypb.Empty, error)
	CreateFollow(context.Context, *Follow) (*Follow, error)
	GetFollowById(context.Context, *ID) (*Follow, error)
	UpdateFollow(context.Context, *Follow) (*Follow, error)
	DeleteFollow(context.Context, *ID) (*emptypb.Empty, error)
	mustEmbedUnimplementedSocialMediaServiceServer()
}

// UnimplementedSocialMediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialMediaServiceServer struct {
}

func (UnimplementedSocialMediaServiceServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSocialMediaServiceServer) GetUserById(context.Context, *ID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedSocialMediaServiceServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSocialMediaServiceServer) DeleteUser(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedSocialMediaServiceServer) CreateFollow(context.Context, *Follow) (*Follow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollow not implemented")
}
func (UnimplementedSocialMediaServiceServer) GetFollowById(context.Context, *ID) (*Follow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowById not implemented")
}
func (UnimplementedSocialMediaServiceServer) UpdateFollow(context.Context, *Follow) (*Follow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFollow not implemented")
}
func (UnimplementedSocialMediaServiceServer) DeleteFollow(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollow not implemented")
}
func (UnimplementedSocialMediaServiceServer) mustEmbedUnimplementedSocialMediaServiceServer() {}

// UnsafeSocialMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialMediaServiceServer will
// result in compilation errors.
type UnsafeSocialMediaServiceServer interface {
	mustEmbedUnimplementedSocialMediaServiceServer()
}

func RegisterSocialMediaServiceServer(s grpc.ServiceRegistrar, srv SocialMediaServiceServer) {
	s.RegisterService(&SocialMediaService_ServiceDesc, srv)
}

func _SocialMediaService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMediaService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).GetUserById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMediaService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMediaService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).DeleteUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMediaService_CreateFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).CreateFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_CreateFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).CreateFollow(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMediaService_GetFollowById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).GetFollowById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_GetFollowById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).GetFollowById(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMediaService_UpdateFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).UpdateFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_UpdateFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).UpdateFollow(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialMediaService_DeleteFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialMediaServiceServer).DeleteFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialMediaService_DeleteFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialMediaServiceServer).DeleteFollow(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialMediaService_ServiceDesc is the grpc.ServiceDesc for SocialMediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialMediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.SocialMediaService",
	HandlerType: (*SocialMediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _SocialMediaService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _SocialMediaService_GetUserById_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SocialMediaService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _SocialMediaService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateFollow",
			Handler:    _SocialMediaService_CreateFollow_Handler,
		},
		{
			MethodName: "GetFollowById",
			Handler:    _SocialMediaService_GetFollowById_Handler,
		},
		{
			MethodName: "UpdateFollow",
			Handler:    _SocialMediaService_UpdateFollow_Handler,
		},
		{
			MethodName: "DeleteFollow",
			Handler:    _SocialMediaService_DeleteFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
